---
import type { BreadcrumbList, ListItem } from 'schema-dts'
import Schema from './Schema.astro'
import { findBreadcrumbEntries } from '../utils/navigation.js'
import type { Page } from '../utils/navigation.js'

export interface Props extends astroHTML.JSX.HTMLAttributes {}

const { ...attrs } = Astro.props

const allPages = await Astro.glob<Page>('/src/pages/**/*.mdx')
const entries = findBreadcrumbEntries(allPages, Astro.url.pathname)

const breadcrumbs: BreadcrumbList = {
  '@type': 'BreadcrumbList',
  itemListElement: entries.map((entry, i) => {
    let item: ListItem = {
      '@type': 'ListItem',
      position: i + 1,
      item: {
        '@id': new URL(entry.url, Astro.site).toString(),
        name: entry.title,
      }
    }

    return item
  }),
}
---

<nav aria-label="Breadcrumbs">
  <ol {...attrs}>
    {
      entries.map((entry, i) => (
        <li>
          {i < entries.length - 1 ? (
            <a href={entry.url}>
                {entry.title}
            </a>
          ) : (
            <span aria-current="page">{entry.title}</span>
          )}
        </li>
      ))
    }
  </ol>
</nav>

<Schema json={breadcrumbs} />

<style>
  ol {
    list-style: none;
    display: inline-flex;
    column-gap: var(--gap-sm);
    padding: 0;
    margin: 0;
  }

  a {
    color: inherit;
    text-decoration: none;
  }

  a:hover, a:focus {
    color: var(--color-secondary);
    text-decoration: underline;
  }

  li:not(:first-child)::before {
    content: 'â†’';
    padding-right: var(--gap-sm);
    color: var(--color-secondary);
  }
</style>
